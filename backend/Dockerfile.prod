# Production Dockerfile for Voice AI Agent
# Optimized for smaller size and better performance

FROM python:3.11-slim as builder

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

# Install build dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        libsndfile1-dev \
        libasound2-dev \
        portaudio19-dev \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libgomp1 \
        libopenblas-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Install uv for faster Python package installation
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Copy requirements
COPY requirements.txt .

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies with uv (venv is activated via PATH)
RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu \
    && uv pip install -r requirements.txt \
    && uv pip install \
        openai-whisper \
        faster-whisper \
        TTS \
        librosa \
        soundfile \
        pyaudio \
        webrtcvad \
        scipy \
        transformers \
        sentence-transformers

# Production image
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        ffmpeg \
        libsndfile1 \
        libportaudio2 \
        libavcodec-extra \
        libgomp1 \
        libopenblas0 \
        curl \
        netcat-openbsd \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create directories for voice processing
RUN mkdir -p /app/models/whisper \
    && mkdir -p /app/models/tts \
    && mkdir -p /app/models/transformers \
    && mkdir -p /app/cache/audio \
    && mkdir -p /app/cache/conversation \
    && mkdir -p /app/logs

# Copy application code
COPY . .

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser \
    && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set voice processing environment variables
ENV WHISPER_CACHE_DIR=/app/models/whisper
ENV TRANSFORMERS_CACHE=/app/models/transformers
ENV VOICE_MODEL_PATH=/app/models
ENV VOICE_CACHE_PATH=/app/cache
ENV ENVIRONMENT=production

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Production command (no reload, optimized workers)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]