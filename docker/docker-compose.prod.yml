version: '3.8'

services:
  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: voiceai_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - voiceai_network
    labels:
      - "monitoring=true"

  # Main API Service
  api:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod.hetzner
    container_name: voiceai_api_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://voiceai:${POSTGRES_PASSWORD}@postgres:5432/voiceai_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=info
      - HETZNER_OPTIMIZED=true
      # Voice Processing
      - WHISPER_MODEL_SIZE=base
      - VOICE_CACHE_ENABLED=true
      - VOICE_CACHE_TTL=3600
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
      # External Services
      - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
      - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    volumes:
      - api_models:/app/models
      - api_cache:/app/cache
      - api_logs:/app/logs
      - api_uploads:/app/data/uploads
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '3.0'
        reservations:
          memory: 4G
          cpus: '1.5'
    labels:
      - "monitoring=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod.hetzner
    container_name: voiceai_celery_worker_prod
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://voiceai:${POSTGRES_PASSWORD}@postgres:5432/voiceai_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
      - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
      - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
    volumes:
      - api_models:/app/models
      - api_cache:/app/cache
      - api_logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    labels:
      - "monitoring=true"

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod.hetzner
    container_name: voiceai_celery_beat_prod
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://voiceai:${POSTGRES_PASSWORD}@postgres:5432/voiceai_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - api_cache:/app/cache
      - api_logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    labels:
      - "monitoring=true"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voiceai_postgres_prod
    environment:
      - POSTGRES_DB=voiceai_db
      - POSTGRES_USER=voiceai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.prod.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    labels:
      - "monitoring=true"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voiceai -d voiceai_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: voiceai_redis_prod
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.prod.conf:/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "monitoring=true"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: voiceai_ollama_prod
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    labels:
      - "monitoring=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: voiceai_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "monitoring=true"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: voiceai_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "monitoring=true"

  # Node Exporter for System Metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: voiceai_node_exporter_prod
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    labels:
      - "monitoring=true"

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: voiceai_loki_prod
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "monitoring=true"

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: voiceai_promtail_prod
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - ./logs:/app/logs:ro
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - voiceai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    labels:
      - "monitoring=true"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  api_models:
    driver: local
  api_cache:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  voiceai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16